- unless entry_test.passed?
  .entry-test-actions.mb-3.row
    .col-12
      = link_to(t('label_edit'), edit_entry_test_path(entry_test), class: 'btn btn-secondary')
      = link_to(t('label_cancel') + ' ' + EntryTest.model_name.human.downcase, '#delete', class: 'ml-3', role: 'button', 'aria-expanded' => 'false', 'aria-controls' => 'delete', data: {toggle: 'collapse'} )
    #delete.collapse.col-12
      = bootstrap_form_for(entry_test, url: entry_test_path(entry_test), method: :delete) do |f|
        = f.text_area(:audit_comment)
        .form-actions
          = f.submit t('label_cancel') + ' ' + EntryTest.model_name.human.downcase, data: { confirm: t('text_confirmation') }, class: 'btn btn-warning'

- if entry_test.unconfirmed?
  = form_tag(entry_test_candidate_entry_tests_path(entry_test)) do
    .form-group
      = check_box_tag('allow_less_candidates', class: 'form-control')
      = label_tag('allow_less_candidates', t('label_allow_less_candidates'), class: 'control-label')
    = submit_tag(t('label_publish_and_invite'), class: 'btn btn-primary')
- else
  - excuses = entry_test.candidate_entry_tests.apologized.preload(candidate: :user)
  %ul.nav.nav-tabs{role: 'tablist'}
    %li.nav-item
      %a#candidates_tab.nav-link.active{href: '#candidates', role: 'tab', data: {toggle: 'tab'}}= t('label_invited_candidates')
    %li.nav-item
      %a#excuses_tab.nav-link{href: '#excuses', role: 'tab', data: {toggle: 'tab'}}
        = t('label_excuses')
        %span.badge.badge-pill.badge-info= excuses.count

  .tab-content
    #candidates.tab-pane.fade.show.active{'aria-labelledby' => 'candidates_tab'}
      - if entry_test.passed? && !entry_test.evaluated?
        = bootstrap_form_tag url: import_results_entry_test_path(entry_test), multipart: true do |f|
          = f.custom_file_field :csv_results
          = f.submit(t('label_upload'))
        :javascript
          $(function(){
            $('.custom-file-input').on('change', function() {
              var fileName = $(this).val().split('\\').pop();
              $(this).siblings('.custom-file-label').addClass('selected').html(fileName);
            });
          });

      - candidate_tests_schema = CandidateEntryTestSchema.new(columns: ['candidate-user-mail', 'candidate-title', 'candidate-user-firstname', 'candidate-user-lastname', 'candidate-higher_title'].concat(entry_test.passed? ? ['absent', 'points'] : []))
      - candidate_tests_schema.default_scope = 'comming'
      - candidate_tests_schema.add_filter('entry_test_id', '=', entry_test.id)
      = form_for(entry_test, url: evaluate_entry_test_path(entry_test)) do |f|
        %table.table
          %thead
            %tr
              %th= EgovUtils::User.human_attribute_name('fullname')
              - if entry_test.passed?
                %th= CandidateEntryTest.human_attribute_name('absent')
                %th= CandidateEntryTest.human_attribute_name('points')
          %tbody
            - candidate_tests_schema.entities.each do |candidate_test|
              = f.fields_for(:candidate_entry_tests_attributes) do |fil|
                - if @evaluate_params && @evaluate_params[:entry_tests][candidate_test.id]
                  - candidate_test.attributes = @evaluate_params[:entry_tests][candidate_test.id].except(:id)
                - elsif @evaluate_params
                  - candidate_test.arrival = 'absent'
                = fil.fields_for(candidate_test.id.to_s.to_sym, candidate_test) do |fields|
                  %tr
                    %td= candidate_test.candidate.user.fullname
                    - if entry_test.passed?
                      %td
                        = fields.hidden_field(:id)
                        = fields.check_box(:arrival, {class: 'test-absent-checkbox', disabled: entry_test.evaluated?}, 'absent', 'arrived')
                      %td.test-points= fields.number_field(:points, class: 'test-points-field', disabled: entry_test.evaluated?)

        - if entry_test.passed? && !entry_test.evaluated?
          = submit_tag(t('label_evaluate'), class: 'btn btn-primary')
          :javascript
            $(function(){
              $('#candidates .test-absent-checkbox').on('change', function(evt){
                $(this).closest('tr').find('.test-points :input').prop('disabled', $(this).is(':checked'))
              });
            });
      - if !entry_test.passed? && candidate_tests_schema.entity_count < entry_test.capacity
        = form_tag(entry_test_candidate_entry_tests_path(entry_test)) do
          .form-group
            = hidden_field_tag('allow_less_candidates', true, class: 'form-control')
          = submit_tag(t('label_invite_additional_candidates'), class: 'btn btn-primary')
      .exports.text-right
        = link_to entry_test_candidate_entry_tests_path(entry_test, candidate_tests_schema.to_param.merge(format: :csv)) do
          %i.fa.fa-file-o
          = t('label_export_as', as: 'CSV')

    #excuses.tab-pane{'aria-labelledby' => 'excuses_tab'}
      %table.table
        %thead
          %tr
            %th= EgovUtils::User.human_attribute_name('fullname')
            %th= CandidateEntryTest.human_attribute_name('apology')
        %tbody
          - excuses.each do |candidate_test|
            %tr
              %td= candidate_test.candidate.user.fullname
              %td= candidate_test.apology
